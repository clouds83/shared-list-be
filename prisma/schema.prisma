generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(100)
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  password  String   @db.VarChar(72)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Each user can only be in ONE subscription (either as owner or member)
  ownedSubscription      Subscription?      @relation("SubscriptionOwner")
  membershipSubscription SubscriptionMember?
  
  @@map("users")
  @@index([email])
}

model Subscription {
  id             String   @id @default(uuid())
  ownerId        String   @unique // One-to-one with owner
  currencySymbol String   @default("$") @db.VarChar(5) // Currency symbol like $, R$, â‚¬, etc.
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  owner      User                 @relation("SubscriptionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members    SubscriptionMember[] // Multiple members allowed
  items      Item[]
  categories Category[]
  units      Unit[]

  @@map("subscriptions")
  @@index([ownerId])
  @@index([isActive])
}

// Members of a subscription (excluding the owner)
model SubscriptionMember {
  id             String   @id @default(uuid())
  userId         String   @unique // Each user can only be a member of ONE subscription
  subscriptionId String
  joinedAt       DateTime @default(now())
  isActive       Boolean  @default(true)
  canEdit        Boolean  @default(false) // Allow member to edit the list

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("subscription_members")
  @@index([subscriptionId])
  @@index([isActive])
}

enum StockLevel {
  LOW
  MEDIUM
  HIGH
}

model Category {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(50) // Category name in lowercase
  subscriptionId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  items        Item[]

  @@map("categories")
  @@unique([name, subscriptionId]) // Unique constraint within subscription
  @@index([subscriptionId])        // Index for subscription queries
  @@index([subscriptionId, name])  // Compound index for lookups
}

model Unit {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(20) // Unit name in lowercase
  subscriptionId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  items        Item[]

  @@map("units")
  @@unique([name, subscriptionId]) // Unique constraint within subscription
  @@index([subscriptionId])        // Index for subscription queries
  @@index([subscriptionId, name])  // Compound index for lookups
}

model Item {
  id             String      @id @default(uuid())
  subscriptionId String
  name           String      @db.VarChar(50)
  shouldBuy      Boolean     @default(true)
  quantity       Int?        @default(1)
  categoryId     String?     // Foreign key to Category table (nullable)
  unitId         String?     // Foreign key to Unit table (nullable)
  currentStock   StockLevel?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relationships
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  category     Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  unit         Unit?        @relation(fields: [unitId], references: [id], onDelete: SetNull)
  prices       ItemPrice[]

  @@map("items")
  // Optimized indexes for large datasets
  @@index([subscriptionId]) // Most common query pattern
  @@index([subscriptionId, shouldBuy]) // Compound index for filtering
  @@index([categoryId]) // Items by category
  @@index([unitId]) // Items by unit
  @@index([subscriptionId, categoryId]) // Items by subscription and category
  @@index([subscriptionId, unitId]) // Items by subscription and unit
  @@index([subscriptionId, createdAt]) // Chronological ordering
  @@index([subscriptionId, updatedAt]) // Recently modified items
}

model ItemPrice {
  id        String   @id @default(uuid())
  itemId    String
  price     Decimal  @db.Decimal(10, 2)
  store     String?  @db.VarChar(50)
  createdAt DateTime @default(now())

  // Relationships
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("item_prices")
  // Optimized indexes for price queries
  @@index([itemId]) // Get all prices for an item
  @@index([itemId, createdAt]) // For price history queries
  @@index([createdAt]) // For cleanup/archival jobs
  @@index([store]) // Price comparison by store
}